#!/bin/sh
#
# Create ...
#

create_private_key() {
    local key="$1"
    openssl ecparam -out "$key" -name prime256v1 -genkey
}

create_csr() {
    local key="$1"
    local csr="$2"
    local subject="$3"
    local tmpconfig=tmp-csr-config

    # -------------------------------------------------------------------------
    cat << EOF > $tmpconfig
# Empty config
EOF
    # -------------------------------------------------------------------------
    openssl req -out "$csr" -new -key "$key" \
            -config $tmpconfig \
            -batch \
            -subj "$subject"
    rm $tmpconfig
}

create_selfsigned_cert() {
    local key="$1"
    local cert="$2"  # output
    local subject="$3"
    local tmpconfig=tmp-selfsigned-config
    # -------------------------------------------------------------------------
    cat << EOF > $tmpconfig
[req]
x509_extensions      = v3_ca

[v3_ca]
subjectKeyIdentifier = hash
basicConstraints     = critical, CA:true
certificatePolicies  = 1.2.3.4
EOF
    # -------------------------------------------------------------------------
    # Validity 20 years
    openssl req -out "$cert" -outform der -x509 -key "$key" \
            -config $tmpconfig \
            -batch -days 7300 \
            -subj "$subject"

	rm $tmpconfig
}

issue_certificate() {
    local ca_cert="$1"
    local ca_key="$2"
    local csr="$3"
    local crt="$4"  # output
    # validity 20 years
    openssl req -CA "$ca_cert" -outform der -CAkey "$ca_key" -days 7300 -in "$csr" -out "$crt"
}

create_cert_rich_properties() {
	CA=root-rich
	create_selfsigned_cert $CA.key $CA.crt "/C=YY/ST=Province Y/L=Locality Y/O=Organization Y/OU=Organization Unit Y/DC=Domain Component Y1/DC=Domain Component Y2/DC=Domain Component Y3/UID=123456+CN=Common Name Y/emailAddress=Y@Y.com/"
}

create_nominal_chain_1() {
	# │ cn:root
	# └──┬─────────────────────────────────────────────────────────────────
	#    ├──┤ cn:level1-a
	#    │  └──┬─────────────────────────────────────────────────────────────────
	#    │     ├──┤ cn:level2-a
	#    │     │  └────────────────────────────────────────────────────────────────────
	#    │     └──┤ cn:level2-b
	#    │        └──┬─────────────────────────────────────────────────────────────────
	#    │           └──┤ cn:level3-a
	#    │              └────────────────────────────────────────────────────────────────────
	#    └──┤ cn:level1-b
	#       └──┬─────────────────────────────────────────────────────────────────
	#          └──┤ cn:level2-c
	#             └────────────────────────────────────────────────────────────────────
	DIR=set01
	mkdir -p $DIR
	cd $DIR
	CA=root
	create_private_key $CA.key
	create_selfsigned_cert $CA.key $CA.crt "/CN=$CA/"
	
	CA=level1-a
	create_private_key $CA.key
	create_csr $CA.key $CA.csr "/CN=$CA/"
	issue_certificate root.crt root.key $CA.csr $CA.crt
	
	CA=level1-b
	create_private_key $CA.key
	create_csr $CA.key $CA.csr "/CN=$CA/"
	issue_certificate root.crt root.key $CA.csr $CA.crt
	
	CA=level2-a
	create_private_key $CA.key
	create_csr $CA.key $CA.csr "/CN=$CA/"
	issue_certificate level1-a.crt level1-a.key $CA.csr $CA.crt
	
	CA=level2-b
	create_private_key $CA.key
	create_csr $CA.key $CA.csr "/CN=$CA/"
	issue_certificate level1-a.crt level1-a.key $CA.csr $CA.crt
	
	CA=level2-c
	create_private_key $CA.key
	create_csr $CA.key $CA.csr "/CN=$CA/"
	issue_certificate level1-b.crt level1-b.key $CA.csr $CA.crt
	
	CA=level3-a
	create_private_key $CA.key
	create_csr $CA.key $CA.csr "/CN=$CA/"
	issue_certificate level2-b.crt level2-b.key $CA.csr $CA.crt

	rm *csr *key

	cd -
}

create_invalid_chain_2() {
	# Create two certificates, adn alter the signature
    # │ cn:2-root
    # └──┬────────────────────
    #    └──┤ cn:2-level1
    #       └───────────────────────────
	DIR=set02
	mkdir -p $DIR
	cd $DIR
	CA=root
	create_private_key $CA.key
	create_selfsigned_cert $CA.key $CA.crt "/CN=$CA/"

    CA=level1-a
    create_private_key $CA.key
    create_csr $CA.key $CA.csr "/CN=$CA/O=abcdefgh/"
    issue_certificate root.crt root.key $CA.csr $CA.crt
	# Alter certificate
	sed -i -e "s/abcdefgh/abcdefxx/" $CA.crt

	rm *csr *key
	cd -
}

create_circular_chain_3() {
	# Create circular chain root -> A -> B -> root
	DIR=set03
	mkdir -p $DIR
	cd $DIR

	CA=root
	create_private_key $CA.key
	create_selfsigned_cert $CA.key $CA.crt "/CN=$CA/"

	CA=a-111
	create_private_key $CA.key
	create_csr $CA.key $CA.csr "/CN=$CA/"
	issue_certificate root.crt root.key $CA.csr $CA.crt

	CA=b-222
	# reuse root.key
	create_csr root.key $CA.csr "/CN=root/"
	issue_certificate a-111.crt a-111.key $CA.csr $CA.crt

	rm *csr *key
	cd -
}

create_circular_chain_4() {
	# Create circular chain root -> A -> B -> C -> A
	DIR=set04
	mkdir -p $DIR
	cd $DIR

	CA=root
	create_private_key $CA.key
	create_selfsigned_cert $CA.key $CA.crt "/CN=$CA/"

	CA=a-111
	create_private_key $CA.key
	create_csr $CA.key $CA.csr "/CN=$CA/"
	issue_certificate root.crt root.key $CA.csr $CA.crt

	CA=b-222
	create_private_key $CA.key
	create_csr $CA.key $CA.csr "/CN=$CA/"
	issue_certificate a-111.crt a-111.key $CA.csr $CA.crt

	CA=c-333
	# reuse root.key
	create_csr root.key $CA.csr "/CN=root/"
	issue_certificate b-222.crt b-222.key $CA.csr $CA.crt

	rm *csr *key
	cd -
}

# main

if [ $(date +%Y) != 2022 ]; then
	T="2022-12-24 08:15:42"
	echo "Running with fake time $T"
	set -x
	faketime -f "$T" "$0" "$@"
	exit $?
fi

#create_nominal_chain_1
#create_invalid_chain_2
create_circular_chain_3
create_circular_chain_4
